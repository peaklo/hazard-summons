name: Release Creation

on:
  push:
    branches:
      - main
  release:
     types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # get part of the tag after the `v`
      # - name: Extract tag version number
      #   id: get_version
      #   uses: battila7/get-version-action@v2

      - name: Build semantic version
        id: semantic_version
        uses: paulhatch/semantic-version@v5.3.0
        with:
          tag_prefox: "v"
          major_pattern: "[major]"
          major_regexp_flags: "ig"
          minor_pattern: "[minor]"
          minor_regexp_flags: "ig"
          enable_prerelease_mode: false
          version_format: "${major}.${minor}.${patch}"

      # Substitute the Manifest and Download URLs in the module.json
      - name: Substitute Manifest and Download Links For Versioned Ones
        id: sub_manifest_link_version
        uses: microsoft/variable-substitution@v1
        with:
          files: 'module.json'
        env:
          version: ${{steps.semantic_version.outputs.version}}
          url: https://github.com/${{github.repository}}
          manifest: https://github.com/${{github.repository}}/releases/latest/download/module.json
          download: https://github.com/${{github.repository}}/releases/download/${{steps.semantic_version.outputs.version}}/module.zip
      

      # Install packages.
      - run: npm install

      # Build distribution.
      - run: npm run build

      # Create a zip file with all files required by the module to add to the release.
      - run: zip -r ./module.zip module.json index.js index.js.map style.css assets/ dist/ lang/ packs/ LICENSE AUTHORS

      # Create a release for this specific version
      - name: Update Release with Files
        id: create_version_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true # Set this to false if you want to prevent updating existing releases
          name: ${{ github.event.release.name }}
          draft: ${{ github.event.release.draft }}
          prerelease: ${{ github.event.release.prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: './module.json, ./module.zip'
          tag: ${{ github.event.release.tag_name }}
          body: ${{ github.event.release.body }}
